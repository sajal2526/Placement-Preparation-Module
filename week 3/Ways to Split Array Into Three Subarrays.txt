class Solution {
public:
    int rightIdx(vector<int> &arr, int cur, int rightSum) {
        int ans = -1, low = 0, high = cur;
        while(low <= high) {
            
            int mid = (low + high) / 2;
            int leftSum = arr[mid], midSum = arr[cur] - arr[mid];
            
            // if(mid == cur-1) {
            //     high--;
            //     continue;
            // }
            if(leftSum > midSum) high = mid-1;
            else if(midSum > rightSum) low = mid+1;
            else {
                ans = mid;
                low = mid+1;
            }
        }        
        return ans;
    }
    int leftIdx(vector<int> &arr, int cur, int rightSum) {
        int ans = -1, low = 0, high = cur;
        while(low <= high) {
            
            int mid = (low + high) / 2;
            int leftSum = arr[mid], midSum = arr[cur] - arr[mid];
            
            if(leftSum > midSum) high = mid-1;
            else if(midSum > rightSum) low = mid+1;
            else {
                ans = mid;
                high = mid-1;
            }
        }        
        return ans;
    }
    int waysToSplit(vector<int>& nums) {
        
        int mod = 1e9+7;
        long n = nums.size(), ans = 0;
        vector<int> pre = nums;
        for(int i = 1; i < n; i++) pre[i] += pre[i-1];
        
        for(int i = n-1; i > 1; i--) {
            int rightSum = pre[n-1] - pre[i-1];
            long left = leftIdx(pre, i-1, rightSum);
            long right = rightIdx(pre, i-1, rightSum);
            
            if(right == i-1) right--;
            if(left >= 0 && right >= 0)     
                ans = (ans + (right - left + 1)) % mod;
            
            // cout << i << " " << left << " " << right << " " << rightSum << endl;
        }
         // cout << endl;
        return ans;
    }
};